name: wordgoal

on:  # yamllint disable-line rule:truthy
  - push

jobs:

  build:
    container: cariad/ci:1.4.0
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - id: cache-venv
        uses: actions/cache@v1
        with:
          key: ${{ runner.os }}-venv-${{ hashFiles('Pipfile.lock') }}
          path: ~/.local/share/virtualenvs

      - if: steps.cache-venv.outputs.cache-hit != 'true'
        run: pipenv sync --dev

      - run: pipenv run ./build.sh "${GITHUB_REF##*/}"

      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true

      - uses: actions/upload-artifact@v2
        with:
          name: distributable
          path: dist
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v2
        with:
          name: distributable

      - run: pip install "$(ls *.whl)"
      - run: wordgoal --width 80 > smoke.out
      - run: cmp ./tests/this-project.out smoke.out

  github:
    if: startsWith(github.ref, 'refs/tags')
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: distributable

      - run: echo "DISTRIBUTABLE=$(ls *.whl)" >> $GITHUB_ENV

      - id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/x-wheel+zip
          asset_name: ${{ env.DISTRIBUTABLE }}
          asset_path: ${{ env.DISTRIBUTABLE }}
          upload_url: ${{ steps.get_release.outputs.upload_url }}

  pypi:
    if: startsWith(github.ref, 'refs/tags')
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: distributable
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
